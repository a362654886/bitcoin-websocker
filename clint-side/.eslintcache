[{"D:\\Github\\bitcoin-websocker\\clint-side\\src\\index.tsx":"1","D:\\Github\\bitcoin-websocker\\clint-side\\src\\router\\privateRoute.tsx":"2","D:\\Github\\bitcoin-websocker\\clint-side\\src\\types\\auth-type.ts":"3","D:\\Github\\bitcoin-websocker\\clint-side\\src\\redux\\auth.ts":"4","D:\\Github\\bitcoin-websocker\\clint-side\\src\\api\\userApi.ts":"5","D:\\Github\\bitcoin-websocker\\clint-side\\src\\types\\index.ts":"6","D:\\Github\\bitcoin-websocker\\clint-side\\src\\container\\loginPage.tsx":"7","D:\\Github\\bitcoin-websocker\\clint-side\\src\\container\\mainPage.tsx":"8","D:\\Github\\bitcoin-websocker\\clint-side\\src\\component\\alertBox.tsx":"9","D:\\Github\\bitcoin-websocker\\clint-side\\src\\helpFn\\klineChart.ts":"10","D:\\Github\\bitcoin-websocker\\clint-side\\src\\helpFn\\tokenFn.ts":"11","D:\\Github\\bitcoin-websocker\\clint-side\\src\\defaultValues\\colums.ts":"12","D:\\Github\\bitcoin-websocker\\clint-side\\src\\helpFn\\addKey.ts":"13","D:\\Github\\bitcoin-websocker\\clint-side\\src\\redux\\middleWares\\websocketMiddleWare.ts":"14","D:\\Github\\bitcoin-websocker\\clint-side\\src\\redux\\client.ts":"15","D:\\Github\\bitcoin-websocker\\clint-side\\src\\redux\\reducers\\index.ts":"16","D:\\Github\\bitcoin-websocker\\clint-side\\src\\redux\\reducers\\reducerFn.ts":"17","D:\\Github\\bitcoin-websocker\\clint-side\\src\\redux\\socketData.ts":"18","D:\\Github\\bitcoin-websocker\\clint-side\\src\\types\\socketType.ts":"19","D:\\Github\\bitcoin-websocker\\clint-side\\src\\api\\dataApi.ts":"20","D:\\Github\\bitcoin-websocker\\clint-side\\src\\redux\\subscription.ts":"21","D:\\Github\\bitcoin-websocker\\clint-side\\src\\helpFn\\transferStringToObj.ts":"22","D:\\Github\\bitcoin-websocker\\clint-side\\src\\helpFn\\transferData.ts":"23","D:\\Github\\bitcoin-websocker\\clint-side\\src\\container\\candleStick.tsx":"24","D:\\Github\\bitcoin-websocker\\clint-side\\src\\helpFn\\candelStick.ts":"25","D:\\Github\\bitcoin-websocker\\clint-side\\src\\helpFn\\math.ts":"26","D:\\Github\\bitcoin-websocker\\clint-side\\src\\types\\htmlType.ts":"27","D:\\Github\\bitcoin-websocker\\clint-side\\src\\helpFn\\lineChart.ts":"28","D:\\Github\\bitcoin-websocker\\clint-side\\src\\redux\\socketConnection.ts":"29"},{"size":1321,"mtime":1614921365717,"results":"30","hashOfConfig":"31"},{"size":537,"mtime":1612571845305,"results":"32","hashOfConfig":"31"},{"size":377,"mtime":1612872942539,"results":"33","hashOfConfig":"31"},{"size":2975,"mtime":1612919600034,"results":"34","hashOfConfig":"31"},{"size":686,"mtime":1612328296848,"results":"35","hashOfConfig":"31"},{"size":514,"mtime":1614675021837,"results":"36","hashOfConfig":"31"},{"size":2806,"mtime":1615351760459,"results":"37","hashOfConfig":"31"},{"size":13834,"mtime":1615352464061,"results":"38","hashOfConfig":"31"},{"size":383,"mtime":1614752949358,"results":"39","hashOfConfig":"31"},{"size":4624,"mtime":1615141607629,"results":"40","hashOfConfig":"31"},{"size":212,"mtime":1612923481888,"results":"41","hashOfConfig":"31"},{"size":209,"mtime":1612581675269,"results":"42","hashOfConfig":"31"},{"size":771,"mtime":1615146765121,"results":"43","hashOfConfig":"31"},{"size":6561,"mtime":1614748844711,"results":"44","hashOfConfig":"31"},{"size":1400,"mtime":1613170743677,"results":"45","hashOfConfig":"31"},{"size":404,"mtime":1614673064874,"results":"46","hashOfConfig":"31"},{"size":1357,"mtime":1614672746780,"results":"47","hashOfConfig":"31"},{"size":3986,"mtime":1614749354998,"results":"48","hashOfConfig":"31"},{"size":1518,"mtime":1614672896866,"results":"49","hashOfConfig":"31"},{"size":1534,"mtime":1613783493340,"results":"50","hashOfConfig":"31"},{"size":1516,"mtime":1614339381567,"results":"51","hashOfConfig":"31"},{"size":762,"mtime":1614405384096,"results":"52","hashOfConfig":"31"},{"size":2657,"mtime":1614622314736,"results":"53","hashOfConfig":"31"},{"size":1660,"mtime":1614752905968,"results":"54","hashOfConfig":"31"},{"size":2952,"mtime":1615140487142,"results":"55","hashOfConfig":"31"},{"size":2019,"mtime":1614615527638,"results":"56","hashOfConfig":"31"},{"size":1135,"mtime":1614671950222,"results":"57","hashOfConfig":"31"},{"size":4833,"mtime":1615143767140,"results":"58","hashOfConfig":"31"},{"size":1045,"mtime":1614674973441,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},"1g25qid",{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"63"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"63"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"63"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"63"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"63"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"73"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"73"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"63"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"63"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"63"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"63"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"63"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"73"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"63"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"63"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"D:\\Github\\bitcoin-websocker\\clint-side\\src\\index.tsx",["137","138","139"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport storage from \"redux-persist/lib/storage\";\nimport { Persistor, persistReducer, persistStore } from \"redux-persist\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport PrivateRoute from \"./router/privateRoute\";\nimport LoginPage from \"./container/loginPage\";\nimport reducer from \"./redux/reducers\";\nimport thunk from \"redux-thunk\";\nimport MainPage from \"./container/mainPage\";\nimport \"antd/dist/antd.css\";\nimport { websocketMiddleWare } from \"./redux/middleWares/websocketMiddleWare\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage: storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, reducer);\nconst store: any = createStore(reducer,applyMiddleware(thunk,websocketMiddleWare));\nconst persistor : Persistor = persistStore(store)\nconsole.log(store.getState())\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <Switch>\n        <Route path=\"/login\" component={LoginPage} exact />\n        <PrivateRoute component={MainPage} path=\"/main_page\" />\n        <Redirect to=\"/login\" />\n      </Switch>\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n",[],"D:\\Github\\bitcoin-websocker\\clint-side\\src\\router\\privateRoute.tsx",["140"],"import * as React from \"react\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\nimport { getToken } from \"../helpFn/tokenFn\";\r\n\r\ninterface IProps {\r\n  component: any;\r\n  path: string;\r\n}\r\n\r\n// nested route\r\n\r\nconst PrivateRoute = ({ component, path }: IProps): JSX.Element => {\r\n  const isLogin = (): boolean => {\r\n    const result = getToken();\r\n    return !!result;\r\n  };\r\n\r\n  return isLogin() ? (\r\n    <Route path={path} component={component} />\r\n  ) : (\r\n    <Redirect to=\"/login\" />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","D:\\Github\\bitcoin-websocker\\clint-side\\src\\types\\auth-type.ts",[],"D:\\Github\\bitcoin-websocker\\clint-side\\src\\redux\\auth.ts",[],"D:\\Github\\bitcoin-websocker\\clint-side\\src\\api\\userApi.ts",[],[],"D:\\Github\\bitcoin-websocker\\clint-side\\src\\types\\index.ts",[],"D:\\Github\\bitcoin-websocker\\clint-side\\src\\container\\loginPage.tsx",[],"D:\\Github\\bitcoin-websocker\\clint-side\\src\\container\\mainPage.tsx",["141","142","143","144"],"import * as React from \"react\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport { IStoreState } from \"../types\";\r\nimport { Checkbox, Radio, RadioChangeEvent, Tabs } from \"antd\";\r\nimport {\r\n  ExchangeEnum,\r\n  orderArr,\r\n  SymbolEnum,\r\n  TimeEnum,\r\n  webSocketData,\r\n} from \"../types/socketType\";\r\nimport { SocketState } from \"../types/htmlType\";\r\nimport { SUBSCRIPTION_ADD, SUBSCRIPTION_DELETE } from \"../redux/subscription\";\r\nimport { transferStringToObj } from \"../helpFn/transferStringToObj\";\r\nimport CandleStick from \"./candleStick\";\r\nimport { addOrderKey, getPercentage } from \"../helpFn/addKey\";\r\nimport * as echarts from \"echarts\";\r\nimport { connectSet, createEchart, echartSet } from \"../helpFn/klineChart\";\r\nimport { getLineData } from \"../helpFn/math\";\r\nimport { CheckboxValueType } from \"antd/lib/checkbox/Group\";\r\nimport {\r\n  LineEnum,\r\n  LineType,\r\n  MainLineType,\r\n  MainStateType,\r\n} from \"../types/htmlType\";\r\nimport { transferLineData } from \"../helpFn/transferData\";\r\nimport { chartData, linChartSvg } from \"../helpFn/lineChart\";\r\nimport {\r\n  initialFn,\r\n  socketState,\r\n} from \"../redux/middleWares/websocketMiddleWare\";\r\nimport { OPEN_SOCKET_DATA } from \"../redux/socketData\";\r\n// MainPage\r\nconst MainPage = (): JSX.Element => {\r\n  const { TabPane } = Tabs;\r\n\r\n  const dispatch = useDispatch();\r\n  const chartOption: LineEnum[] = [\r\n    LineEnum.RSI,\r\n    LineEnum.ADX,\r\n    LineEnum.MACD,\r\n    LineEnum.MFI,\r\n  ];\r\n\r\n  const initialState: MainStateType = {\r\n    menu: {\r\n      time: TimeEnum.oneMin,\r\n      symbols: [],\r\n    },\r\n    chart: {\r\n      title: \"\",\r\n      klineData: [],\r\n      orderData: {\r\n        bid: [],\r\n        ask: [],\r\n      },\r\n    },\r\n  };\r\n\r\n  const socketData: Map<string, webSocketData> = useSelector(\r\n    (state: IStoreState) => state.socketData\r\n  );\r\n\r\n  const initialLineObj: MainLineType = {\r\n    lineChoose: chartOption,\r\n    lineData: null,\r\n  };\r\n\r\n  const lineChart: chartData = {\r\n    series: [{ name: \"empty\", values: [1] }],\r\n    dates: [0],\r\n  };\r\n\r\n  // ref div\r\n  const lineDiv = document.getElementById(\"lineChart\");\r\n  const lineRef = useRef<HTMLElement | null>();\r\n  const eChart = useRef<echarts.ECharts>();\r\n  const connectChart = useRef<echarts.ECharts>();\r\n\r\n  //userState\r\n  const [mainState, setMainState] = useState<MainStateType>(initialState);\r\n  const [lineObj, setLineObj] = useState<MainLineType>(initialLineObj);\r\n\r\n  //use uerSelelctor\r\n  const symbolData: [string, webSocketData][] = useSelector(\r\n    (state: IStoreState) => Array.from(state.socketData),\r\n    shallowEqual\r\n  );\r\n\r\n  const connectData: Map<string, number> = useSelector(\r\n    (state: IStoreState) => state.socketConnection\r\n  );\r\n\r\n  //initial data\r\n  useEffect(() => {\r\n    async function initialHistory() {\r\n      const binanceBNBBTC1m = await initialFn(\r\n        ExchangeEnum.BINANCE,\r\n        SymbolEnum.BNBBTC,\r\n        TimeEnum.oneMin\r\n      );\r\n      dispatch({\r\n        payload: binanceBNBBTC1m.payload,\r\n        type: OPEN_SOCKET_DATA,\r\n      });\r\n    }\r\n    //initial history data\r\n    initialHistory();\r\n\r\n    //get kline data and set\r\n    initialState.chart.title = \"BINANCEbtcusdt1m\";\r\n    setMainState(initialState);\r\n\r\n    //initial chart\r\n    eChart.current = createEchart(\"chart\");\r\n    const title = `${transferStringToObj(mainState.chart.title).exchange}-${\r\n      transferStringToObj(mainState.chart.title).symbol\r\n    },${transferStringToObj(mainState.chart.title).time}`;\r\n\r\n    echartSet(eChart.current, mainState.chart.klineData, title);\r\n\r\n    //initial connect chart\r\n    connectChart.current = createEchart(\"socketWindow\");\r\n    connectSet(connectChart.current, [0, 0, 0, 0, 0]);\r\n  }, []);\r\n\r\n  // data update\r\n  useEffect(() => {\r\n    mainState.menu.symbols = symbolData;\r\n    //set chart\r\n    const title = `${transferStringToObj(mainState.chart.title).exchange}-${\r\n      transferStringToObj(mainState.chart.title).symbol\r\n    },${transferStringToObj(mainState.chart.title).time}`;\r\n    if (eChart.current) {\r\n      echartSet(eChart.current, mainState.chart.klineData, title);\r\n    }\r\n    //set connectchart\r\n    if (connectChart.current) {\r\n      const numberArr = Array.from(connectData);\r\n      const attrArr = numberArr.map((x) => x[1]);\r\n      connectSet(connectChart.current, attrArr.slice(-5));\r\n    }\r\n    //update data\r\n    const data = mainState.menu.symbols.filter(\r\n      (x) => x[0] == mainState.chart.title\r\n    );\r\n    mainState.chart.klineData = data[0] ? data[0][1].klineData : [];\r\n    mainState.chart.orderData = data[0]\r\n      ? data[0][1].orderData\r\n      : {\r\n          bid: [],\r\n          ask: [],\r\n        };\r\n\r\n    // get line data and set\r\n    const raw_lineData: LineType | null = getLineData(\r\n      socketData,\r\n      mainState.chart.title\r\n    );\r\n    let length = 0;\r\n    if (raw_lineData) {\r\n      const lineDataMap = new Map(Object.entries(raw_lineData));\r\n      for (const key of lineDataMap.keys()) {\r\n        const exist = lineObj.lineChoose\r\n          .map((x: any) => x.toString())\r\n          .indexOf(key.toString());\r\n\r\n        if (exist == -1) {\r\n          lineDataMap.delete(key);\r\n        }\r\n      }\r\n      lineObj.lineData = Object.fromEntries(lineDataMap.entries());\r\n      const newData = transferLineData(lineObj.lineData);\r\n      lineChart.dates = newData.datas;\r\n      lineChart.series = newData.series;\r\n      length = newData.length;\r\n    }\r\n    if (!lineRef.current) {\r\n      lineRef.current = lineDiv;\r\n    }\r\n    if (lineDiv) {\r\n      lineDiv?.childNodes[0].replaceWith(\r\n        linChartSvg(lineChart, length) as SVGSVGElement\r\n      );\r\n    }\r\n  }, [symbolData]);\r\n\r\n  const timeChange = (e: RadioChangeEvent) => {\r\n    const oleTime = mainState.menu.time;\r\n    const newTime = e.target.value;\r\n    const newChartObj = mainState.menu.symbols;\r\n    const deleteArr = new Array(mainState.menu.symbols);\r\n    //delete old\r\n    deleteArr[0].forEach((item) => {\r\n      dispatch({\r\n        data: item[0],\r\n        type: SUBSCRIPTION_DELETE,\r\n      });\r\n    });\r\n    //add new\r\n    newChartObj.forEach((item) => {\r\n      const newString = item[0].toString().replace(oleTime, newTime.toString());\r\n      const dataObj = transferStringToObj(newString);\r\n      dispatch({\r\n        data: {\r\n          type: `${dataObj.exchange}${dataObj.symbol}${dataObj.time}`,\r\n          subscription: {\r\n            exchange: dataObj.exchange,\r\n            symbol: dataObj.symbol,\r\n            time: dataObj.time,\r\n          },\r\n        },\r\n        type: SUBSCRIPTION_ADD,\r\n      });\r\n    });\r\n    mainState.menu.time = newTime;\r\n    mainState.chart.title = mainState.chart.title\r\n      .toString()\r\n      .replace(oleTime, newTime.toString());\r\n  };\r\n\r\n  const lineChange = (e: CheckboxValueType[]) => (lineObj.lineChoose = e);\r\n\r\n  const chooseChart = (key: string) => (mainState.chart.title = key);\r\n\r\n  const getMenuTitle = (title: string, item: [string, webSocketData]) =>{\r\n    if(mainState.chart.title.indexOf(title) == -1){\r\n      return (<p>\r\n      <span className=\"menuTitle\">{transferStringToObj(item[0]).symbol}</span>\r\n    </p> )\r\n    }else{\r\n      return (<p>\r\n        <span>{transferStringToObj(item[0]).symbol}</span>\r\n      </p> )\r\n    }\r\n  }\r\n\r\n  const getChartMenu = (): JSX.Element | JSX.Element[] => {\r\n    return (\r\n      <Tabs defaultActiveKey=\"0\" onChange={chooseChart}>\r\n        {mainState.menu.symbols.map((item, index) => (\r\n          <TabPane\r\n            tab={\r\n              <div>\r\n                <CandleStick divId={item[0]} type={item[0]} />\r\n                {\r\n                  getMenuTitle(transferStringToObj(item[0]).symbol,item)\r\n                }\r\n              </div>\r\n            }\r\n            key={item[0]}\r\n          ></TabPane>\r\n        ))}\r\n      </Tabs>\r\n    );\r\n  };\r\n\r\n  const getOrderHtml = (): JSX.Element | JSX.Element[] => {\r\n    return (\r\n      <div style={{ display: \"flex\" }}>\r\n        <div>\r\n          <div id=\"chart\" style={{ width: \"800px\", height: \"220px\" }}></div>\r\n          <div id=\"lineChart\" style={{ width: \"800px\", display: \"flex\" }}>\r\n            <p></p>\r\n          </div>\r\n          <div className=\"bottomLines\" style={{ display: \"flex\" }}>\r\n            <Checkbox.Group\r\n              style={{ display: \"flex\", width: \"80%\" ,color:\"white\"}}\r\n              options={chartOption}\r\n              defaultValue={[\r\n                LineEnum.RSI,\r\n                LineEnum.ADX,\r\n                LineEnum.MACD,\r\n                LineEnum.MFI,\r\n              ]}\r\n              onChange={lineChange}\r\n            />\r\n          </div>\r\n          <p id=\"rsi\"></p>\r\n          <p id=\"adx1\"></p>\r\n          <p id=\"adx2\"></p>\r\n          <p id=\"adx3\"></p>\r\n          <p id=\"macd1\"></p>\r\n          <p id=\"macd2\"></p>\r\n          <p id=\"macd3\"></p>\r\n          <p id=\"mfi\"></p>\r\n        </div>\r\n        <div style={{ display: \"flex\" }}>\r\n          <div style={{ margin: \"1rem\", display: \"flex\", width: \"300px\" }}>\r\n            <div style={{ width: \"50%\" }}>\r\n              <p className=\"whiteText\">Bid Price</p>\r\n              {addOrderKey((mainState.chart.orderData as orderArr).bid).map(\r\n                (item) => (\r\n                  <p\r\n                    className=\"whiteText\"\r\n                    style={{\r\n                      backgroundColor: \"green\",\r\n                      width: getPercentage(\r\n                        (mainState.chart.orderData as orderArr).bid,\r\n                        item.key\r\n                      ),\r\n                    }}\r\n                    key={item.key}\r\n                  >\r\n                    {parseFloat(item.price).toFixed(6)}\r\n                  </p>\r\n                )\r\n              )}\r\n            </div>\r\n            <div>\r\n              <p className=\"whiteText\">Bid Amount</p>\r\n              {addOrderKey((mainState.chart.orderData as orderArr).bid).map(\r\n                (item) => (\r\n                  <p className=\"whiteText\" key={item.key}>\r\n                    {parseFloat(item.amount).toFixed(6)}\r\n                  </p>\r\n                )\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div style={{ margin: \"1rem\", display: \"flex\", width: \"300px\" }}>\r\n            <div style={{ width: \"50%\" }}>\r\n              <p className=\"whiteText\">Ask Price</p>\r\n              {addOrderKey((mainState.chart.orderData as orderArr).ask).map(\r\n                (item) => (\r\n                  <p\r\n                    className=\"whiteText\"\r\n                    style={{\r\n                      backgroundColor: \"green\",\r\n                      width: getPercentage(\r\n                        (mainState.chart.orderData as orderArr).ask,\r\n                        item.key\r\n                      ),\r\n                    }}\r\n                    key={item.key}\r\n                  >\r\n                    {parseFloat(item.price).toFixed(6)}\r\n                  </p>\r\n                )\r\n              )}\r\n            </div>\r\n            <div>\r\n              <p className=\"whiteText\">Ask Amount</p>\r\n              {addOrderKey((mainState.chart.orderData as orderArr).ask).map(\r\n                (item) => (\r\n                  <p className=\"whiteText\" key={item.key}>\r\n                    {parseFloat(item.amount).toFixed(6)}\r\n                  </p>\r\n                )\r\n              )}\r\n            </div>\r\n          </div>        \r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const getColor = () => {\r\n    if (socketState.socket?.readyState == 1) {\r\n      return \"greenCircle\";\r\n    } else {\r\n      return \"redCircle\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"menu\">\r\n        <div>\r\n          <div className=\"menuLabel\">\r\n            <h4 className=\"whiteText\" style={{ width: \"100px\" }}>\r\n              EXCHANGE:\r\n            </h4>\r\n            <div className=\"menuType\">\r\n              <p className=\"whiteText\">BINANCE</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"menuLabel\">\r\n            <h4 className=\"whiteText\" style={{ width: \"100px\" }}>\r\n              TIME:\r\n            </h4>\r\n            <div className=\"menuType\">\r\n              <Radio.Group\r\n                onChange={timeChange}\r\n                style={{ marginBottom: 16 }}\r\n                defaultValue={TimeEnum.oneMin}\r\n              >\r\n                <Radio value={TimeEnum.oneMin}>\r\n                  <span className=\"whiteText\">1m</span>\r\n                </Radio>\r\n                <Radio value={TimeEnum.threeMin}>\r\n                  <span className=\"whiteText\">3m</span>\r\n                </Radio>\r\n                <Radio value={TimeEnum.fiveMin}>\r\n                  <span className=\"whiteText\">5m</span>\r\n                </Radio>\r\n                <Radio value={TimeEnum.fifteenMin}>\r\n                  <span className=\"whiteText\">15m</span>\r\n                </Radio>\r\n                <Radio value={TimeEnum.thirtyMin}>\r\n                  <span className=\"whiteText\">30m</span>\r\n                </Radio>\r\n                <Radio value={TimeEnum.oneHour}>\r\n                  <span className=\"whiteText\">1h</span>\r\n                </Radio>\r\n                <Radio value={TimeEnum.oneDay}>\r\n                  <span className=\"whiteText\">1d</span>\r\n                </Radio>\r\n              </Radio.Group>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"menuTabs\">\r\n        <h4 className=\"whiteText\" style={{ width: \"100px\" }}>\r\n          SYMBOL:\r\n        </h4>\r\n        {getChartMenu()}\r\n      </div>\r\n      <div className=\"chartMain\">{getOrderHtml()}</div>\r\n      <div className=\"socketWindow\">\r\n        <div style={{ display: \"flex\", height: \"20px\" }}>\r\n          <p className={getColor()}></p>\r\n          <p>socket State</p>\r\n        </div>\r\n        <div id=\"socketWindow\" style={{ width: \"200px\", height: \"60px\" }}></div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","D:\\Github\\bitcoin-websocker\\clint-side\\src\\component\\alertBox.tsx",[],"D:\\Github\\bitcoin-websocker\\clint-side\\src\\helpFn\\klineChart.ts",["145","146"],"import * as echarts from \"echarts\";\r\nimport { Kline } from \"../types/socketType\";\r\n\r\nconst upColor = \"#ec0000\";\r\nconst upBorderColor = \"#8A0000\";\r\nconst downColor = \"#00da3c\";\r\nconst downBorderColor = \"#008F28\";\r\n\r\nexport const createEchart = (id: string): echarts.ECharts => {\r\n  const chart_dom = document.getElementById(id) as HTMLElement;\r\n  const myChart = echarts.init(chart_dom);\r\n  return myChart;\r\n};\r\n\r\nexport const echartSet = (\r\n  echart: echarts.ECharts,\r\n  data: Kline[],\r\n  chart_name: string\r\n): void => {\r\n  const _data = generateOHLC(data);\r\n  const option = {\r\n    dataset: {\r\n      source: _data,\r\n    },\r\n    title: {\r\n      text: chart_name,\r\n      textStyle: {\r\n        color: \"white\",\r\n      },\r\n    },\r\n    tooltip: {\r\n      trigger: \"axis\",\r\n      axisPointer: {\r\n        type: \"line\",\r\n      },\r\n    },\r\n    toolbox: {\r\n      feature: {\r\n        dataZoom: {\r\n          yAxisIndex: false,\r\n        },\r\n      },\r\n    },\r\n    grid: [\r\n      {\r\n        left: \"10%\",\r\n        right: \"10%\",\r\n        bottom: 50,\r\n      },\r\n      {\r\n        left: \"10%\",\r\n        right: \"10%\",\r\n        height: 80,\r\n        bottom: 50,\r\n      },\r\n    ],\r\n    xAxis: [\r\n      {\r\n        type: \"category\",\r\n        scale: true,\r\n        boundaryGap: false,\r\n        // inverse: true,\r\n        axisLine: { onZero: false, lineStyle: { color: \"white\", width: 2 } },\r\n        splitLine: { show: false },\r\n        splitNumber: 20,\r\n        min: \"dataMin\",\r\n        max: \"dataMax\",\r\n      },\r\n      {\r\n        type: \"category\",\r\n        gridIndex: 1,\r\n        scale: true,\r\n        boundaryGap: false,\r\n        axisLine: { onZero: false },\r\n        axisTick: { show: false },\r\n        splitLine: { show: false },\r\n        axisLabel: { show: false },\r\n        splitNumber: 20,\r\n        min: \"dataMin\",\r\n        max: \"dataMax\",\r\n      },\r\n    ],\r\n    yAxis: [\r\n      {\r\n        scale: true,\r\n        splitArea: {\r\n          show: true,\r\n        },\r\n        axisLine: { onZero: false, lineStyle: { color: \"white\", width: 2 } },\r\n      },\r\n      {\r\n        scale: true,\r\n        gridIndex: 1,\r\n        splitNumber: 2,\r\n        axisLabel: { show: false },\r\n        axisLine: { show: false },\r\n        axisTick: { show: false },\r\n        splitLine: { show: false },\r\n      },\r\n    ],\r\n    visualMap: {\r\n      show: false,\r\n      seriesIndex: 1,\r\n      dimension: 6,\r\n      pieces: [\r\n        {\r\n          value: 1,\r\n          color: upColor,\r\n        },\r\n        {\r\n          value: -1,\r\n          color: downColor,\r\n        },\r\n      ],\r\n    },\r\n    series: [\r\n      {\r\n        type: \"candlestick\",\r\n        itemStyle: {\r\n          color: upColor,\r\n          color0: downColor,\r\n          borderColor: upBorderColor,\r\n          borderColor0: downBorderColor,\r\n        },\r\n        encode: {\r\n          x: 0,\r\n          y: [1, 4, 3, 2],\r\n        },\r\n      },\r\n      {\r\n        name: \"Volumn\",\r\n        type: \"bar\",\r\n        xAxisIndex: 1,\r\n        yAxisIndex: 1,\r\n        itemStyle: {\r\n          color: \"#7fbe9e\",\r\n        },\r\n        large: true,\r\n        encode: {\r\n          x: 0,\r\n          y: 5,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n  if (echart) {\r\n    option && echart.setOption(option);\r\n  }\r\n};\r\n\r\nconst generateOHLC = (kline_data: Kline[]) => {\r\n  const data: any = [];\r\n  for (let i = 0; i < kline_data.length; i++) {\r\n    data[i] = [\r\n      kline_data[i].time,\r\n      kline_data[i].open_price, // open\r\n      kline_data[i].high_price, // highest\r\n      kline_data[i].low_price, // lowest\r\n      kline_data[i].close_price, // close\r\n      0,\r\n      getSign(\r\n        data,\r\n        i,\r\n        +kline_data[i].open_price,\r\n        +kline_data[i].close_price,\r\n        4\r\n      ), // sign\r\n    ];\r\n  }\r\n  return data;\r\n};\r\n\r\nconst getSign = (\r\n  data: any,\r\n  dataIndex: number,\r\n  openVal: number,\r\n  closeVal: number,\r\n  closeDimIdx: number\r\n) => {\r\n  let sign;\r\n  if (openVal > closeVal) {\r\n    sign = -1;\r\n  } else if (openVal < closeVal) {\r\n    sign = 1;\r\n  } else {\r\n    sign =\r\n      dataIndex > 0\r\n        ? // If close === open, compare with close of last record\r\n          data[dataIndex - 1][closeDimIdx] <= closeVal\r\n          ? 1\r\n          : -1\r\n        : // No record of previous, set to be positive\r\n          1;\r\n  }\r\n\r\n  return sign;\r\n};\r\n\r\nexport const connectSet = (echart: echarts.ECharts, data: number[]): void => {\r\n  const option = {\r\n    xAxis: {\r\n      type: \"category\",\r\n      data: [],\r\n    },\r\n    yAxis: {\r\n      type: \"value\",\r\n    },\r\n    series: [\r\n      {\r\n        data: data,\r\n        type: \"bar\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  if (echart) {\r\n    option && echart.setOption(option);\r\n  }\r\n};\r\n","D:\\Github\\bitcoin-websocker\\clint-side\\src\\helpFn\\tokenFn.ts",[],"D:\\Github\\bitcoin-websocker\\clint-side\\src\\defaultValues\\colums.ts",[],[],"D:\\Github\\bitcoin-websocker\\clint-side\\src\\helpFn\\addKey.ts",["147","148"],"export interface orderTableData {\r\n  key: number;\r\n  price: string;\r\n  amount: string;\r\n}\r\n\r\nexport const addOrderKey = (rawArr: string[]): orderTableData[] =>\r\n  rawArr.map((x, index) => {\r\n    return {\r\n      key: index,\r\n      price: x[0],\r\n      amount: x[1],\r\n    };\r\n  });\r\n\r\nexport const percentageReduce = (accumulator: string, currentValue: string) => {\r\n  const result = parseFloat(accumulator) + parseFloat(currentValue);\r\n  return result.toString();\r\n};\r\n\r\nexport const getPercentage = (rawArr: string[],index: number) => {\r\n  let total = 0;\r\n  rawArr.forEach(x =>{\r\n    total = total + parseFloat(x[1]);\r\n  })\r\n  const totalValue = total\r\n  const result = ((parseFloat(rawArr[index][1])/totalValue) * 100).toFixed(2);\r\n  return result.toString() + \"%\";\r\n};\r\n","D:\\Github\\bitcoin-websocker\\clint-side\\src\\redux\\middleWares\\websocketMiddleWare.ts",["149","150","151"],"import { getBinanceHistory } from \"../../api/dataApi\";\r\nimport { getToken } from \"../../helpFn/tokenFn\";\r\nimport {\r\n  actionType,\r\n  middleStoreType,\r\n  nextAction,\r\n} from \"../../types/defaultType\";\r\nimport {\r\n  ExchangeEnum,\r\n  Kline,\r\n  SymbolEnum,\r\n  TimeEnum,\r\n  webSocketData,\r\n} from \"../../types/socketType\";\r\nimport { AUTH_USER_SUCCESS } from \"../auth\";\r\nimport {\r\n  DELETE_SOCKET_DATA,\r\n  INITIAL_SOCKET_DATA,\r\n  OPEN_SOCKET_DATA,\r\n  UPDATE_SOCKET_DATA_KLINE,\r\n  UPDATE_SOCKET_DATA_ORDER,\r\n} from \"../socketData\";\r\nimport { SocketKlineData, SocketOrderData } from \"../../types/socketType\";\r\nimport { SUBSCRIPTION_ADD, SUBSCRIPTION_DELETE } from \"../subscription\";\r\nimport { transferStringToObj } from \"../../helpFn/transferStringToObj\";\r\nimport { getLineData } from \"../../helpFn/math\";\r\nimport { UPDATE_SOCKET_CONNECT_DATA } from \"../socketConnection\";\r\n\r\ntype socketState ={\r\n  socket:WebSocket|null\r\n}\r\n\r\nexport const socketState: socketState = {\r\n  socket:null\r\n}\r\n\r\nexport const websocketMiddleWare = (store: middleStoreType) => (\r\n  next: nextAction\r\n) => async (action: actionType): Promise<void> => {\r\n  next(action);\r\n  const token = getToken();\r\n  //initial websocket\r\n  if (action.type == OPEN_SOCKET_DATA) {\r\n    //initial websocket\r\n    socketState.socket = new WebSocket(\r\n      `ws://localhost:8080/ws?clientId=${token}&exchange=BINANCE&symbol=bnbbtc&time=1m`\r\n    );\r\n    const ws: WebSocket = socketState.socket as WebSocket;\r\n    // build a initialize event\r\n    ws.onmessage = function (event) {\r\n      const data = JSON.parse(event.data);\r\n      \r\n      if (data.kline) {\r\n        data.kline.close_price = parseFloat(data.kline.close_price);\r\n        data.kline.high_price = parseFloat(data.kline.high_price);\r\n        data.kline.low_price = parseFloat(data.kline.low_price);\r\n        data.kline.open_price = parseFloat(data.kline.open_price);\r\n        data.kline.volume = parseFloat(data.kline.volume);\r\n        const socketKlineData: SocketKlineData = {\r\n          type: data.type,\r\n          data: data.kline,\r\n        };\r\n        store.dispatch({\r\n          payload: socketKlineData,\r\n          type: UPDATE_SOCKET_DATA_KLINE,\r\n        });\r\n      }\r\n\r\n      if (data.order) {\r\n        const socketOrderData: SocketOrderData = {\r\n          type: data.type,\r\n          data: data.order,\r\n        };\r\n        //console.log(socketOrderData)\r\n        store.dispatch({\r\n          payload: socketOrderData,\r\n          type: UPDATE_SOCKET_DATA_ORDER,\r\n        });\r\n      }\r\n\r\n      //add connecttion\r\n      store.dispatch({\r\n        payload: new Date(),\r\n        type: UPDATE_SOCKET_CONNECT_DATA,\r\n      });\r\n    };\r\n\r\n    setTimeout(() => {\r\n      //initial others\r\n      //btcusdt\r\n      store.dispatch({\r\n        data: {\r\n          type: `${ExchangeEnum.BINANCE}${SymbolEnum.BTCUSDT}${TimeEnum.oneMin}`,\r\n          subscription: {\r\n            exchange: ExchangeEnum.BINANCE,\r\n            symbol: SymbolEnum.BTCUSDT,\r\n            time: TimeEnum.oneMin,\r\n          },\r\n        },\r\n        type: SUBSCRIPTION_ADD,\r\n      });\r\n      //bnbbusd\r\n      store.dispatch({\r\n        data: {\r\n          type: `${ExchangeEnum.BINANCE}${SymbolEnum.BNBBUSD}${TimeEnum.oneMin}`,\r\n          subscription: {\r\n            exchange: ExchangeEnum.BINANCE,\r\n            symbol: SymbolEnum.BNBBUSD,\r\n            time: TimeEnum.oneMin,\r\n          },\r\n        },\r\n        type: SUBSCRIPTION_ADD,\r\n      });\r\n      //ethbusd\r\n      store.dispatch({\r\n        data: {\r\n          type: `${ExchangeEnum.BINANCE}${SymbolEnum.ETHBUSD}${TimeEnum.oneMin}`,\r\n          subscription: {\r\n            exchange: ExchangeEnum.BINANCE,\r\n            symbol: SymbolEnum.ETHBUSD,\r\n            time: TimeEnum.oneMin,\r\n          },\r\n        },\r\n        type: SUBSCRIPTION_ADD,\r\n      });\r\n    },1000);\r\n  }\r\n  //client update\r\n  if (action.type == SUBSCRIPTION_ADD) {\r\n    const ws: WebSocket = socketState.socket as WebSocket;\r\n    //initial history data\r\n    //initial history data\r\n    const historyData = await getHistoryData(\r\n      action.data.subscription.exchange,\r\n      action.data.subscription.symbol,\r\n      action.data.subscription.time\r\n    );\r\n    store.dispatch({\r\n      payload: {\r\n        exchange: action.data.subscription.exchange,\r\n        symbol: action.data.subscription.symbol,\r\n        time: action.data.subscription.time,\r\n        data: historyData,\r\n      },\r\n      type: INITIAL_SOCKET_DATA,\r\n    });\r\n    //update kline data\r\n    ws.send(\r\n      `{ \"exchange\":\"${action.data.subscription.exchange}\", \"symbol\":\"${action.data.subscription.symbol}\", \"time\":\"${action.data.subscription.time}\",\"type\":\"update\"}`\r\n    );\r\n  }\r\n\r\n  if (action.type == SUBSCRIPTION_DELETE) {\r\n    const ws: WebSocket = socketState.socket as WebSocket;\r\n    store.dispatch({\r\n      payload: action.data,\r\n      type: DELETE_SOCKET_DATA,\r\n    });\r\n    //update kline data\r\n    const obj = transferStringToObj(action.data);\r\n    ws.send(\r\n      `{ \"exchange\":\"${obj.exchange}\", \"symbol\":\"${obj.symbol}\", \"time\":\"${obj.time}\",\"type\":\"delete\"}`\r\n    );\r\n  }\r\n};\r\n\r\nconst getHistoryData = async (\r\n  exchange: ExchangeEnum,\r\n  symbol: SymbolEnum,\r\n  time: TimeEnum\r\n): Promise<webSocketData> => {\r\n  //get result array\r\n  const endTimeNum = new Date().setDate(new Date().getDate() - 11);\r\n  const startTimeNum = new Date().setDate(new Date().getDate() - 1);\r\n  const endTime = new Date(endTimeNum);\r\n  const startTime = new Date(startTimeNum);\r\n  const historyData = await getBinanceHistory(\r\n    symbol,\r\n    time,\r\n    `${endTime.getFullYear()}-${endTime.getMonth() + 1}-${endTime.getDate()}`,\r\n    `${startTime.getFullYear()}-${\r\n      startTime.getMonth() + 1\r\n    }-${startTime.getDate()}`\r\n  );\r\n  //format array\r\n  const lastTen = historyData?.slice(\r\n    historyData.length - 99,\r\n    historyData.length\r\n  );\r\n  const klineArr: Kline[] = [];\r\n  lastTen?.forEach((e) => {\r\n    const kline: Kline = {\r\n      open_price: parseFloat(e.open),\r\n      close_price: parseFloat(e.close),\r\n      high_price: parseFloat(e.high),\r\n      low_price: parseFloat(e.low),\r\n      volume: parseFloat(e.volume),\r\n      time: e.time,\r\n    };\r\n    klineArr.push(kline);\r\n  });\r\n  return {\r\n    klineData: klineArr,\r\n    orderData: {\r\n      bid: [],\r\n      ask: [],\r\n    },\r\n  };\r\n};\r\n\r\nexport const initialFn = async (\r\n  exchange: ExchangeEnum,\r\n  symbol: SymbolEnum,\r\n  time: TimeEnum\r\n) => {\r\n  const data = await getHistoryData(exchange, symbol, time);\r\n  return {\r\n    payload: {\r\n      exchange: exchange,\r\n      symbol: symbol,\r\n      time: time,\r\n      data: data,\r\n    },\r\n  };\r\n};\r\n","D:\\Github\\bitcoin-websocker\\clint-side\\src\\redux\\client.ts",["152","153"],"import { createReducer } from \"./reducers/reducerFn\";\r\nimport { Client, ExchangeEnum, SymbolEnum, TimeEnum } from \"../types/socketType\";\r\n\r\n//actions\r\n\r\nexport const CLIENT_INI = \"CLIENT_INI\";\r\nexport type CLIENT_INI = typeof CLIENT_INI;\r\n\r\nexport const CLIENT_UPDATE = \"CLIENT_UPDATE\";\r\nexport type CLIENT_UPDATE = typeof CLIENT_UPDATE;\r\n\r\nexport const CLIENT_DELETE = \"CLIENT_DELETE\";\r\nexport type CLIENT_DELETE = typeof CLIENT_DELETE;\r\n\r\nexport type clientType = CLIENT_INI | CLIENT_UPDATE | CLIENT_DELETE;\r\n\r\n//action type\r\nexport interface ClientIniAction {\r\n  data: Client;\r\n  type: typeof CLIENT_INI;\r\n}\r\n\r\nexport interface ClientUpdateAction {\r\n  data: Client;\r\n  type: typeof CLIENT_UPDATE;\r\n}\r\n\r\nexport interface ClientDeleteAction {\r\n  data: Client;\r\n  type: typeof CLIENT_DELETE;\r\n}\r\n\r\nexport type ClientAction =\r\n  | ClientIniAction\r\n  | ClientUpdateAction\r\n  | ClientDeleteAction;\r\n\r\n//reducer\r\nconst handlers = {\r\n  CLIENT_INI: (state: Client, action: ClientAction) => action.data,\r\n  CLIENT_DELETE: (state: Client, action: ClientAction) => undefined,\r\n  CLIENT_UPDATE: (state: Client, action: ClientAction) => action.data,\r\n};\r\nexport const client = (\r\n  state: Client = {\r\n    clientId: \"\",\r\n    exchange: ExchangeEnum.BINANCE,\r\n    time: TimeEnum.oneMin,\r\n    symbol: SymbolEnum.BTCUSDT\r\n  },\r\n  action: ClientAction\r\n): Client => createReducer<Client>(state, action, handlers);\r\n\r\n","D:\\Github\\bitcoin-websocker\\clint-side\\src\\redux\\reducers\\index.ts",[],"D:\\Github\\bitcoin-websocker\\clint-side\\src\\redux\\reducers\\reducerFn.ts",["154"],"import { AuthUser } from \"../auth\";\r\nimport { ClientAction } from \"../client\";\r\nimport { SocketConnectUpdateAction } from \"../socketConnection\";\r\nimport { WebSocketDeleteAction, WebSocketInitialAction, WebSocketOpenAction, WebSocketUpdateKlineAction, WebSocketUpdateOrderAction } from \"../socketData\";\r\nimport {\r\n  SubscriptionAddAction,\r\n  SubscriptionDeleteAction,\r\n} from \"../subscription\";\r\n\r\ninterface SimpleKeyValueObject {\r\n  [key: string]: any;\r\n}\r\n\r\ntype actionBody =\r\n  | ClientAction\r\n  | AuthUser\r\n  | WebSocketInitialAction\r\n  | WebSocketDeleteAction\r\n  | WebSocketUpdateOrderAction\r\n  | WebSocketUpdateKlineAction\r\n  | SubscriptionAddAction\r\n  | SubscriptionDeleteAction\r\n  | WebSocketOpenAction\r\n  | SocketConnectUpdateAction;\r\n\r\nexport const mapArray = (\r\n  type: string,\r\n  handlers: SimpleKeyValueObject\r\n): string | undefined => {\r\n  for (const key in handlers) {\r\n    if (key == type) {\r\n      return key;\r\n    }\r\n  }\r\n};\r\n\r\nexport const runHandler = <T>(\r\n  state: T,\r\n  action: actionBody,\r\n  handler: (state: T, action: actionBody) => T\r\n): T => handler(state, action);\r\n\r\nexport const createReducer = <T>(\r\n  state: T,\r\n  action: actionBody,\r\n  handlers: SimpleKeyValueObject\r\n): T => {\r\n  const key = mapArray(action.type, handlers);\r\n  if (key) {\r\n    return runHandler<T>(state, action, handlers[key]);\r\n  }\r\n  return state;\r\n};\r\n","D:\\Github\\bitcoin-websocker\\clint-side\\src\\redux\\socketData.ts",["155"],"import { createReducer } from \"./reducers/reducerFn\";\r\nimport {\r\n  SocketInitialDataType,\r\n  SocketKlineData,\r\n  SocketOrderData,\r\n  SocketTypeData,\r\n  webSocketData,\r\n} from \"../types/socketType\";\r\n\r\n//TO DO symbol name\r\nexport const UPDATE_SOCKET_DATA_KLINE = \"UPDATE_SOCKET_DATA_KLINE\";\r\nexport type UPDATE_SOCKET_DATA_KLINE = typeof UPDATE_SOCKET_DATA_KLINE;\r\n\r\nexport const UPDATE_SOCKET_DATA_ORDER = \"UPDATE_SOCKET_DATA_ORDER\";\r\nexport type UPDATE_SOCKET_DATA_ORDER = typeof UPDATE_SOCKET_DATA_ORDER;\r\n\r\nexport const INITIAL_SOCKET_DATA = \"INITIAL_SOCKET_DATA\";\r\nexport type INITIAL_SOCKET_DATA = typeof INITIAL_SOCKET_DATA;\r\n\r\nexport const DELETE_SOCKET_DATA = \"DELETE_SOCKET_DATA\";\r\nexport type DELETE_SOCKET_DATA = typeof DELETE_SOCKET_DATA;\r\n\r\nexport const OPEN_SOCKET_DATA = \"OPEN_SOCKET_DATA\";\r\nexport type OPEN_SOCKET_DATA = typeof OPEN_SOCKET_DATA;\r\n\r\nexport interface WebSocketUpdateKlineAction {\r\n  payload: SocketKlineData;\r\n  type: typeof UPDATE_SOCKET_DATA_KLINE;\r\n}\r\n\r\nexport interface WebSocketUpdateOrderAction {\r\n  payload: SocketOrderData;\r\n  type: typeof UPDATE_SOCKET_DATA_ORDER;\r\n}\r\n\r\nexport interface WebSocketInitialAction {\r\n  payload: SocketInitialDataType;\r\n  type: typeof INITIAL_SOCKET_DATA;\r\n}\r\n\r\nexport interface WebSocketDeleteAction {\r\n  payload: string;\r\n  type: typeof DELETE_SOCKET_DATA;\r\n}\r\n\r\nexport interface WebSocketOpenAction {\r\n  payload: SocketInitialDataType;\r\n  type: typeof OPEN_SOCKET_DATA;\r\n}\r\n\r\nconst handlers = {\r\n  UPDATE_SOCKET_DATA_KLINE: (\r\n    state: Map<string, webSocketData>,\r\n    action: WebSocketUpdateKlineAction\r\n  ) => {\r\n    const typeExist = state.has(action.payload.type);\r\n    if (typeExist) {\r\n      const mapArr = state.get(action.payload.type) as webSocketData;\r\n      const end = mapArr.klineData[mapArr.klineData.length - 1];\r\n      if (end.time == action.payload.data.time) {\r\n        mapArr.klineData[mapArr.klineData.length - 1] = action.payload.data;\r\n      } else {\r\n        mapArr.klineData.push(action.payload.data);\r\n      }\r\n    } else {\r\n      state.set(action.payload.type, {\r\n        klineData: [action.payload.data],\r\n        orderData: {\r\n          bid: [],\r\n          ask: [],\r\n        },\r\n      });\r\n    }\r\n    const newState = new Map<string, webSocketData>(state);\r\n    return newState;\r\n  },\r\n  UPDATE_SOCKET_DATA_ORDER: (\r\n    state: Map<string, webSocketData>,\r\n    action: WebSocketUpdateOrderAction\r\n  ) => {\r\n    const typeExist = state.has(action.payload.type);\r\n    if (typeExist) {\r\n      const mapArr = state.get(action.payload.type) as webSocketData;\r\n      mapArr.orderData = action.payload.data;\r\n    } else {\r\n      state.set(action.payload.type, {\r\n        klineData: [],\r\n        orderData: action.payload.data,\r\n      });\r\n    }\r\n    const newState = new Map<string, webSocketData>(state);\r\n    return newState;\r\n  },\r\n  INITIAL_SOCKET_DATA: (\r\n    state: Map<string, webSocketData>,\r\n    action: WebSocketInitialAction\r\n  ) => {\r\n    const type = `${action.payload.exchange}${action.payload.symbol}${action.payload.time}`;\r\n    state.set(type, action.payload.data);\r\n    return state;\r\n  },\r\n  OPEN_SOCKET_DATA: (\r\n    state: Map<string, webSocketData>,\r\n    action: WebSocketInitialAction\r\n  ) => {\r\n    const type = `${action.payload.exchange}${action.payload.symbol}${action.payload.time}`;\r\n    state.set(type, action.payload.data);\r\n    return state;\r\n  },\r\n  DELETE_SOCKET_DATA: (\r\n    state: Map<string, webSocketData>,\r\n    action: WebSocketDeleteAction\r\n  ) => {\r\n    state.delete(action.payload);\r\n    const newState = new Map<string, webSocketData>(state);\r\n    return newState;\r\n  },\r\n};\r\nexport const socketData = (\r\n  state: Map<string, webSocketData> = new Map<string, webSocketData>(),\r\n  action:\r\n    | WebSocketInitialAction\r\n    | WebSocketDeleteAction\r\n    | WebSocketUpdateOrderAction\r\n    | WebSocketUpdateKlineAction\r\n    | WebSocketOpenAction\r\n): Map<string, webSocketData> =>\r\n  createReducer<Map<string, webSocketData>>(state, action, handlers);\r\n","D:\\Github\\bitcoin-websocker\\clint-side\\src\\types\\socketType.ts",[],"D:\\Github\\bitcoin-websocker\\clint-side\\src\\api\\dataApi.ts",["156","157"],"import { user } from \"../types/auth-type\";\r\nimport Axios from \"axios\";\r\nimport { chartData, historyData } from \"../types/historyType\";\r\n\r\n//const basicURL = `http://localhost:3000/dev/`;\r\nconst basicURL = `http://localhost:8081/`;\r\n\r\nexport const getBinanceHistory = async (\r\n  symbol: string,\r\n  interval: string,\r\n  startTime: string,\r\n  endTime: string\r\n): Promise<historyData[] | null> => {\r\n  const endpoint =\r\n    basicURL +\r\n    `getBinanceHistory/?symbol=${symbol}&interval=${interval}&startTime=${startTime}&endTime=${endTime}`;\r\n  return Axios.get(endpoint)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch(() => {\r\n      return null;\r\n    });\r\n};\r\n\r\n/*export const getBitCoin = async (\r\n  symbol: string,\r\n  interval: string,\r\n  startTime: string,\r\n  endTime: string\r\n): Promise<chartData | null> => {\r\n  const endpoint =\r\n    basicURL +\r\n    `getBitCoinHistory/?symbol=${symbol}&interval=${interval}&startTime=${startTime}&endTime=${endTime}`;\r\n  return Axios.get(endpoint)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch(() => {\r\n      return null;\r\n    });\r\n};*/\r\n\r\n/*export const getStock = async (\r\n  symbol: string,\r\n  startTime: string,\r\n  endTime: string\r\n): Promise<chartData | null> => {\r\n  const endpoint =\r\n    basicURL +\r\n    `getStockHistory/?symbol=${symbol}&startTime=${startTime}&endTime=${endTime}`;\r\n  return Axios.get(endpoint)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch(() => {\r\n      return null;\r\n    });\r\n};*/\r\n","D:\\Github\\bitcoin-websocker\\clint-side\\src\\redux\\subscription.ts",[],"D:\\Github\\bitcoin-websocker\\clint-side\\src\\helpFn\\transferStringToObj.ts",["158"],"import {\r\n  ExchangeEnum,\r\n  SubscriptionString,\r\n  SymbolEnum,\r\n} from \"../types/socketType\";\r\n\r\nexport const transferStringToObj = (ObjString: string) => {\r\n  const result: SubscriptionString = {\r\n    exchange: \"\",\r\n    symbol: \"\",\r\n    time: \"\",\r\n  };\r\n  for (const exchange in ExchangeEnum) {\r\n    if (ObjString.indexOf(exchange) != -1) {\r\n      result.exchange = exchange;\r\n    }\r\n  }\r\n  for (const symbol in SymbolEnum) {\r\n    if (ObjString.indexOf(symbol.toLocaleLowerCase()) != -1) {\r\n      result.symbol = symbol.toLocaleLowerCase();\r\n    }\r\n  }\r\n  const arr = [\"1m\", \"3m\", \"5m\", \"15m\", \"30m\", \"1h\", \"1d\"];\r\n  for (const index in arr) {\r\n    if (ObjString.indexOf(arr[index]) != -1) {\r\n      result.time = arr[index];\r\n    }\r\n  }\r\n  return result;\r\n};\r\n","D:\\Github\\bitcoin-websocker\\clint-side\\src\\helpFn\\transferData.ts",["159","160","161","162","163","164"],"import { ADXOutput } from \"technicalindicators/declarations/directionalmovement/ADX\";\r\nimport { MACDOutput } from \"technicalindicators/declarations/moving_averages/MACD\";\r\nimport { LineType } from \"../types/htmlType\";\r\nimport { webSocketData } from \"../types/socketType\";\r\n\r\nexport const transferData = (data: Map<string, webSocketData>) => {\r\n  const resultData: {\r\n    series: any;\r\n    dates: any;\r\n  } = {\r\n    series: [],\r\n    dates: [],\r\n  };\r\n  data.forEach((key, map) => {\r\n    const obj = {\r\n      name: map,\r\n      values: key.klineData.map((x) => {\r\n        if(parseFloat(x.close_price.toString())<1){\r\n          return parseFloat(x.close_price.toString())*10000\r\n        }else{\r\n          return parseFloat(x.close_price.toString())*0.001\r\n        }\r\n      }),\r\n    };\r\n    const time = key.klineData.map((x) => new Date(x.time));\r\n    resultData.series.push(obj);\r\n    resultData.dates= time;\r\n  });\r\n\r\n  return resultData\r\n};\r\n\r\nconst raw_data = {\r\n  series: [\r\n    {\r\n      name: \"aaa\",\r\n      values: [46, 47, 48, 49, 50],\r\n    },\r\n  ],\r\n  dates: [\r\n    new Date(\"2000-01-01\"),\r\n    new Date(\"2000-01-02\"),\r\n    new Date(\"2000-01-03\"),\r\n    new Date(\"2000-01-04\"),\r\n    new Date(\"2000-01-05\"),\r\n  ],\r\n};\r\n\r\nexport const transferLineData =(linedata: {\r\n  [k: string]: number[] | ADXOutput[] | MACDOutput[];\r\n}) =>{\r\n  let length = 1000;\r\n  for(const i in linedata){\r\n    if(linedata[i].length <length){\r\n      length = linedata[i].length\r\n    }\r\n  }\r\n  const list = Array.from(new Array(length).keys())\r\n  const data = {\r\n    series:[\r\n      {\r\n        name: \"rsi\",\r\n        values: linedata.RSI?linedata.RSI.slice(0,length):[]\r\n      },\r\n      {\r\n        name: \"adx\",\r\n        values: linedata.ADX?(linedata.ADX as ADXOutput[]).map(x=>x.adx).slice(0,length):[]\r\n      },\r\n      {\r\n        name: \"pdi\",\r\n        values: linedata.ADX?(linedata.ADX as ADXOutput[]).map(x=>x.pdi).slice(0,length):[]\r\n      },\r\n      {\r\n        name: \"mdi\",\r\n        values: linedata.ADX?(linedata.ADX as ADXOutput[]).map(x=>x.mdi).slice(0,length):[]\r\n      },\r\n      {\r\n        name: \"macd\",\r\n        values: linedata.MACD?(linedata.MACD as MACDOutput[]).map(x=>x.MACD).slice(0,length):[]\r\n      },\r\n      {\r\n        name: \"singal\",\r\n        values: linedata.MACD?(linedata.MACD as MACDOutput[]).map(x=>x.signal).slice(0,length):[]\r\n      },\r\n      {\r\n        name: \"histogram\",\r\n        values: linedata.MACD?(linedata.MACD as MACDOutput[]).map(x=>x.histogram).slice(0,length):[]\r\n      },\r\n      {\r\n        name: \"MFI\",\r\n        values: linedata.MFI?linedata.MFI.slice(0,length):[]\r\n      }\r\n    ],\r\n    datas:list,\r\n    length: length\r\n  }\r\n  return data\r\n}\r\n","D:\\Github\\bitcoin-websocker\\clint-side\\src\\container\\candleStick.tsx",["165","166","167","168","169","170","171"],"import * as React from \"react\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { candelStickSvg, CandleStickType } from \"../helpFn/candelStick\";\r\nimport { IStoreState } from \"../types\";\r\nimport { webSocketData } from \"../types/socketType\";\r\nimport * as d3 from \"d3\";\r\nimport { NumberValue } from \"d3\";\r\nimport { transferData } from \"../helpFn/transferData\";\r\n\r\ninterface IProps {\r\n  divId: string;\r\n  type: string;\r\n}\r\n\r\nconst CandleStick = ({ divId, type }: IProps): JSX.Element => {\r\n  const raw_data = {\r\n    series: [\r\n      {\r\n        name: \"aaa\",\r\n        values: [21, 32, 43, 54, 65],\r\n      },\r\n    ],\r\n    dates: [new Date(\"2000-01-01\")],\r\n  };\r\n\r\n  const div = document.getElementById(divId);\r\n\r\n  const socketData: Map<string, webSocketData> = useSelector(\r\n    (state: IStoreState) => state.socketData\r\n  );\r\n  const ref1 = useRef<any>();\r\n  useEffect(() => {\r\n    ref1.current = div;\r\n  });\r\n\r\n  useEffect(() => {\r\n    //candle stick\r\n    const newData = socketData.get(type);\r\n    const klinData = newData?.klineData;\r\n    const klineFormatData = klinData?.map((x) => {\r\n      return {\r\n        date: new Date(x.time),\r\n        high: x.high_price,\r\n        low: x.low_price,\r\n        open: x.open_price,\r\n        close: x.close_price,\r\n      };\r\n    });\r\n\r\n    if (klineFormatData && ref1.current && div) {\r\n      const svg = candelStickSvg(klineFormatData);\r\n      div?.childNodes[0].replaceWith(svg.node() as SVGSVGElement);\r\n    }\r\n  }, [socketData]);\r\n\r\n  return (\r\n    <>\r\n      <div id={divId}>\r\n        <div></div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CandleStick;\r\n","D:\\Github\\bitcoin-websocker\\clint-side\\src\\helpFn\\candelStick.ts",["172","173","174","175","176","177","178"],"import * as d3 from \"d3\";\r\nimport { NumberValue } from \"d3\";\r\n\r\nexport type CandleStickType = {\r\n  date: Date;\r\n  high: number;\r\n  low: number;\r\n  open: number;\r\n  close: number;\r\n};\r\n\r\nconst transferToCandleData = (data: CandleStickType[]): string[] =>\r\n  data.map(\r\n    (x: CandleStickType) =>\r\n      x.date.getHours().toString() + \":\" + x.date.getMinutes().toString()\r\n  );\r\n\r\nconst transferNumberType = (dateArr: any[]): NumberValue[] => {\r\n  const stringArr: NumberValue[] = [];\r\n  dateArr.forEach((x) => {\r\n    if (x) {\r\n      stringArr.push(x);\r\n    }\r\n  });\r\n  return stringArr;\r\n};\r\n\r\nexport const candelStickSvg = (data: CandleStickType[]) => {\r\n  const height = 100;\r\n  const width = 200;\r\n  const margin = { top: 0, right: 0, bottom: 0, left: 80 };\r\n\r\n  const x = d3\r\n    .scaleBand()\r\n    .domain(transferToCandleData(data))\r\n    .range([0, width])\r\n    .padding(0.9);\r\n\r\n  const y = d3\r\n    .scaleLinear()\r\n    .domain(\r\n      transferNumberType([\r\n        d3.min(data, (d) => d.low),\r\n        d3.max(data, (d) => d.high),\r\n      ])\r\n    )\r\n    .rangeRound([100, margin.top]);\r\n\r\n  const formatValue = d3.format(\".2f\");\r\n\r\n  const formatChange = (y0: any, y1: any) => {\r\n    const f = d3.format(\"+.2%\");\r\n    return f((y1 - y0) / y0);\r\n  };\r\n\r\n  const yAxis = (g: any) => {\r\n    g.attr(\"transform\", `translate(0,0)`)\r\n      .call(\r\n        d3\r\n          .axisLeft(y)\r\n          .tickFormat(d3.format(\"$~f\"))\r\n          .tickValues(d3.scaleLinear().domain(y.domain()).ticks())\r\n      )\r\n      .call((g: any) =>\r\n        g\r\n          .selectAll(\".tick line\")\r\n          .clone()\r\n          .attr(\"stroke-opacity\", 0.2)\r\n          .attr(\"x2\", 200)\r\n      )\r\n      .call((g: any) => g.select(\".domain\").remove());\r\n  };\r\n\r\n  const chart = () => {\r\n    const svg = d3.create(\"svg\");\r\n    svg.attr(\"viewBox\");\r\n    svg.attr(\"width\", width).attr(\"height\", height);\r\n\r\n    svg.append(\"g\").call(yAxis);\r\n\r\n    const g = svg\r\n      .append(\"g\")\r\n      .attr(\"stroke-linecap\", \"round\")\r\n      .attr(\"stroke\", \"black\")\r\n      .selectAll(\"g\")\r\n      .data(data)\r\n      .join(\"g\")\r\n      .attr(\"transform\", (d) => {\r\n        return `translate(${x(\r\n          d.date.getHours().toString() + \":\" + d.date.getMinutes().toString()\r\n        )},0)`;\r\n      })\r\n\r\n    g.append(\"line\")\r\n      .attr(\"y1\", (d) => y(d.low))\r\n      .attr(\"y2\", (d) => y(d.high));\r\n\r\n    g.append(\"line\")\r\n      .attr(\"y1\", (d) => y(d.open))\r\n      .attr(\"y2\", (d) => y(d.close))\r\n      .attr(\"stroke-width\", x.bandwidth())\r\n      .attr(\"stroke\", (d) =>\r\n        d.open > d.close\r\n          ? d3.schemeSet1[0]\r\n          : d.close > d.open\r\n          ? d3.schemeSet1[2]\r\n          : d3.schemeSet1[8]\r\n      );\r\n\r\n    g.append(\"title\").text(\r\n      (d) => `${d.date}\r\nOpen: ${formatValue(d.open)}\r\nClose: ${formatValue(d.close)} (${formatChange(d.open, d.close)})\r\nLow: ${formatValue(d.low)}\r\nHigh: ${formatValue(d.high)}`\r\n    );\r\n\r\n    return svg;\r\n  };\r\n\r\n  return chart();\r\n};\r\n","D:\\Github\\bitcoin-websocker\\clint-side\\src\\helpFn\\math.ts",["179","180"],"import { webSocketData } from \"../types/socketType\";\r\nimport { ADL, RSI, ADX, ATR, MACD, MFI } from \"technicalindicators\";\r\nimport \"data-forge-fs\"; // Add file system functions to Data-Forge.\r\nimport \"data-forge-plot\"; // Add chart plotting functions to Data-Forge.\r\nimport \"data-forge-indicators\"; // Add financial indicator functions to Data-Forge.\r\nimport TA from \"ta-math\";\r\nimport { LineType } from \"../types/htmlType\";\r\n\r\n\r\nexport type ADXOutput = {\r\n  adx: number;\r\n  pdi: number;\r\n  mdi: number;\r\n};\r\n\r\nexport const getLineData = (\r\n  socketData: Map<string, webSocketData>,\r\n  type: string\r\n): LineType | null => {\r\n  //const ta = new TA([], TA.exchangeFormat);\r\n  //TypeError: ta_math__WEBPACK_IMPORTED_MODULE_4___default.a is not a constructor\r\n\r\n  \r\n  const webSocketData = socketData.get(type);\r\n  const klineArr = webSocketData?.klineData;\r\n  if (klineArr) {\r\n    const high = klineArr?.map((x) => x.high_price) as [];\r\n    const low = klineArr?.map((x) => x.low_price) as [];\r\n    const close = klineArr?.map((x) => x.close_price) as [];\r\n    const open = klineArr?.map((x) => x.open_price) as [];\r\n    const volume = klineArr?.map((x) => x.volume) as [];\r\n    return {\r\n      ADL: ADL.calculate({\r\n        high: high,\r\n        low: low,\r\n        close: close,\r\n        volume: volume,\r\n      }),\r\n      RSI: RSI.calculate({ values: close, period: 15 }),\r\n      ADX: ADX.calculate({\r\n        close: close,\r\n        high: high,\r\n        low: low,\r\n        period: 15,\r\n      }),\r\n      ATR: ATR.calculate({\r\n        high: high,\r\n        low: low,\r\n        close: close,\r\n        period: 15,\r\n      }),\r\n      MACD: MACD.calculate({\r\n        values: close,\r\n        fastPeriod: 5,\r\n        slowPeriod: 8,\r\n        signalPeriod: 3,\r\n        SimpleMAOscillator: false,\r\n        SimpleMASignal: false,\r\n      }),\r\n      MFI: MFI.calculate({\r\n        high: high,\r\n        low: low,\r\n        close: close,\r\n        volume: volume,\r\n        period: 14,\r\n      }),\r\n    };\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","D:\\Github\\bitcoin-websocker\\clint-side\\src\\types\\htmlType.ts",[],"D:\\Github\\bitcoin-websocker\\clint-side\\src\\helpFn\\lineChart.ts",["181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197"],"import * as d3 from \"d3\";\r\nimport { NumberValue } from \"d3\";\r\nimport { ADXOutput } from \"technicalindicators/declarations/directionalmovement/ADX\";\r\nimport { MACDOutput } from \"technicalindicators/declarations/moving_averages/MACD\";\r\n\r\nexport type chartData = {\r\n  series: {\r\n    name: string;\r\n    values: (number | ADXOutput | MACDOutput | undefined)[];\r\n  }[];\r\n  dates: number[];\r\n};\r\n\r\nexport const linChartSvg = (\r\n  chartData: chartData,\r\n  xNum: number\r\n): SVGSVGElement | null => {\r\n  const height = 200;\r\n  const width = 800;\r\n  const margin = { top: 20, right: 20, bottom: 20, left: 60 };\r\n\r\n  const x = d3.scaleLinear().domain([1, xNum]).range([80, 720]);\r\n\r\n  const y = d3\r\n    .scaleLinear()\r\n    .domain([-60, 100])\r\n    .nice()\r\n    .range([height - margin.bottom, margin.top]);\r\n\r\n  const xAxis = (g: any) =>\r\n    g.attr(\"transform\", `translate(0,${height - margin.bottom})`).call(\r\n      d3\r\n        .axisBottom(x)\r\n        .ticks(width / 80)\r\n        .tickSizeOuter(0)\r\n    );\r\n\r\n  const yAxis = (g: any) =>\r\n    g\r\n      .attr(\"transform\", `translate(${margin.left},0)`)\r\n      .attr(\"color\", \"white\")\r\n      .call(d3.axisLeft(y))\r\n      .call((g: any) => g.select(\".domain\").remove())\r\n      .call((g: any) =>\r\n        g\r\n          .select(\".tick:last-of-type text\")\r\n          .clone()\r\n          .attr(\"x\", 3)\r\n          .attr(\"text-anchor\", \"start\")\r\n          .attr(\"font-weight\", \"bold\")\r\n          .attr(\"class\", \"axis\")\r\n      );\r\n\r\n  let anyX: any = \"\";\r\n\r\n  const line = d3\r\n    .line()\r\n    .defined((d: any) => !isNaN(d))\r\n    .x((d, i) => {\r\n      if (!x((chartData as chartData).dates[i])) {\r\n        return anyX;\r\n      } else {\r\n        anyX = x((chartData as chartData).dates[i]);\r\n        return x((chartData as chartData).dates[i]);\r\n      }\r\n    })\r\n    .y((d: any) => {\r\n      return y(d);\r\n    });\r\n\r\n  const hover = (svg: any, path: any) => {\r\n    if (\"ontouchstart\" in document)\r\n      svg\r\n        .style(\"-webkit-tap-highlight-color\", \"transparent\")\r\n        .on(\"touchmove\", moved)\r\n        .on(\"touchstart\", entered)\r\n        .on(\"touchend\", left);\r\n    else\r\n      svg\r\n        .on(\"mousemove\", moved)\r\n        .on(\"mouseenter\", entered)\r\n        .on(\"mouseleave\", left);\r\n\r\n    const dot = svg.append(\"g\").attr(\"display\", \"none\");\r\n\r\n    dot.append(\"circle\").attr(\"r\", 2.5);\r\n\r\n    dot\r\n      .append(\"text\")\r\n      .attr(\"font-family\", \"sans-serif\")\r\n      .attr(\"font-size\", 10)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"y\", -8);\r\n\r\n    function moved(event: any) {\r\n      if (chartData) {\r\n        event.preventDefault();\r\n        const pointer = d3.pointer(event);\r\n        const xm = x.invert(pointer[0]);\r\n        const ym = y.invert(pointer[1]);\r\n        const i = d3.bisectCenter(chartData.dates, xm);\r\n        const s = d3.least(chartData.series, (d: any) =>\r\n          Math.abs(d.values[i] - ym)\r\n        );\r\n        path\r\n          .attr(\"stroke\", (d: any) => (d === s ? \"black\" : \"Lavender\"))\r\n          .filter((d: any) => d === s)\r\n          .raise();\r\n        if (s) {\r\n          dot.attr(\r\n            \"transform\",\r\n            `translate(${x(chartData.dates[i])},${y(s.values[i] as number)})`\r\n          );\r\n          dot.select(\"text\").text(s.name);\r\n          dot.attr(\"stroke\", \"black\");\r\n        }\r\n      }\r\n    }\r\n\r\n    function entered() {\r\n      path.style(\"mix-blend-mode\", null).attr(\"stroke\", \"#ddd\");\r\n      dot.attr(\"display\", null);\r\n    }\r\n\r\n    function left() {\r\n      path.style(\"mix-blend-mode\", \"multiply\").attr(\"stroke\", null);\r\n      dot.attr(\"display\", \"none\");\r\n    }\r\n  };\r\n\r\n  const chart = () => {\r\n    const svg = d3.create(\"svg\");\r\n    svg.attr(\"viewBox\");\r\n    svg.attr(\"width\", width).attr(\"height\", height);\r\n\r\n    svg.style(\"overflow\", \"visible\");\r\n\r\n    //svg.append(\"g\").call(xAxis);\r\n\r\n    svg.append(\"g\").call(yAxis);\r\n\r\n    const path = svg\r\n      .append(\"g\")\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke-width\", 1.5)\r\n      .attr(\"stroke-linejoin\", \"round\")\r\n      .attr(\"stroke-linecap\", \"round\")\r\n      .selectAll(\"path\")\r\n      .data((chartData as chartData).series)\r\n      .join(\"path\")\r\n      .style(\"mix-blend-mode\", \"multiply\")\r\n      .attr(\"d\", (d: any) => {\r\n        return line(d.values);\r\n      })\r\n      .attr(\"stroke\", (d: any) => {\r\n        return getColor(d.name);\r\n      });\r\n\r\n    svg.call(hover, path);\r\n\r\n    return svg.node();\r\n  };\r\n  return chart();\r\n};\r\n\r\nconst getColor = (type: string) => {\r\n  switch (type) {\r\n    case \"rsi\":\r\n      return \"red\";\r\n    case \"pdi\":\r\n      return \"pink\";\r\n    case \"mdi\":\r\n      return \"yellow\";\r\n    case \"macd\":\r\n      return \"green\";\r\n    case \"singal\":\r\n      return \"blue\";\r\n    case \"histogram\":\r\n      return \"purple\";\r\n    case \"MFI\":\r\n      return \"cyan\";\r\n    case \"adx\":\r\n      return \"DeepPink\";\r\n    default:\r\n      return \"black\";\r\n  }\r\n};\r\n","D:\\Github\\bitcoin-websocker\\clint-side\\src\\redux\\socketConnection.ts",[],{"ruleId":"198","severity":1,"message":"199","line":27,"column":7,"nodeType":"200","messageId":"201","endLine":27,"endColumn":23},{"ruleId":"202","severity":1,"message":"203","line":28,"column":14,"nodeType":"204","messageId":"205","endLine":28,"endColumn":17,"suggestions":"206"},{"ruleId":"198","severity":1,"message":"207","line":29,"column":7,"nodeType":"200","messageId":"201","endLine":29,"endColumn":28},{"ruleId":"202","severity":1,"message":"203","line":6,"column":14,"nodeType":"204","messageId":"205","endLine":6,"endColumn":17,"suggestions":"208"},{"ruleId":"198","severity":1,"message":"209","line":13,"column":10,"nodeType":"200","messageId":"201","endLine":13,"endColumn":21},{"ruleId":"198","severity":1,"message":"210","line":84,"column":19,"nodeType":"200","messageId":"201","endLine":84,"endColumn":29},{"ruleId":"202","severity":1,"message":"203","line":167,"column":20,"nodeType":"204","messageId":"205","endLine":167,"endColumn":23,"suggestions":"211"},{"ruleId":"198","severity":1,"message":"212","line":243,"column":44,"nodeType":"200","messageId":"201","endLine":243,"endColumn":49},{"ruleId":"202","severity":1,"message":"203","line":152,"column":15,"nodeType":"204","messageId":"205","endLine":152,"endColumn":18,"suggestions":"213"},{"ruleId":"202","severity":1,"message":"203","line":174,"column":9,"nodeType":"204","messageId":"205","endLine":174,"endColumn":12,"suggestions":"214"},{"ruleId":"215","severity":1,"message":"216","line":16,"column":33,"nodeType":"217","messageId":"218","endLine":16,"endColumn":79},{"ruleId":"215","severity":1,"message":"216","line":21,"column":30,"nodeType":"217","messageId":"218","endLine":21,"endColumn":65},{"ruleId":"198","severity":1,"message":"219","line":15,"column":10,"nodeType":"200","messageId":"201","endLine":15,"endColumn":27},{"ruleId":"198","severity":1,"message":"220","line":26,"column":10,"nodeType":"200","messageId":"201","endLine":26,"endColumn":21},{"ruleId":"215","severity":1,"message":"216","line":211,"column":26,"nodeType":"217","messageId":"218","endLine":215,"endColumn":5},{"ruleId":"198","severity":1,"message":"221","line":41,"column":19,"nodeType":"200","messageId":"201","endLine":41,"endColumn":32},{"ruleId":"198","severity":1,"message":"222","line":41,"column":34,"nodeType":"200","messageId":"201","endLine":41,"endColumn":54},{"ruleId":"202","severity":1,"message":"203","line":11,"column":18,"nodeType":"204","messageId":"205","endLine":11,"endColumn":21,"suggestions":"223"},{"ruleId":"198","severity":1,"message":"224","line":6,"column":3,"nodeType":"200","messageId":"201","endLine":6,"endColumn":17},{"ruleId":"198","severity":1,"message":"225","line":1,"column":10,"nodeType":"200","messageId":"201","endLine":1,"endColumn":14},{"ruleId":"198","severity":1,"message":"226","line":3,"column":10,"nodeType":"200","messageId":"201","endLine":3,"endColumn":19},{"ruleId":"215","severity":1,"message":"216","line":7,"column":36,"nodeType":"217","messageId":"218","endLine":7,"endColumn":58},{"ruleId":"198","severity":1,"message":"227","line":3,"column":10,"nodeType":"200","messageId":"201","endLine":3,"endColumn":18},{"ruleId":"215","severity":1,"message":"216","line":6,"column":29,"nodeType":"217","messageId":"218","endLine":6,"endColumn":66},{"ruleId":"202","severity":1,"message":"203","line":8,"column":13,"nodeType":"204","messageId":"205","endLine":8,"endColumn":16,"suggestions":"228"},{"ruleId":"202","severity":1,"message":"203","line":9,"column":12,"nodeType":"204","messageId":"205","endLine":9,"endColumn":15,"suggestions":"229"},{"ruleId":"198","severity":1,"message":"230","line":33,"column":7,"nodeType":"200","messageId":"201","endLine":33,"endColumn":15},{"ruleId":"215","severity":1,"message":"216","line":49,"column":32,"nodeType":"217","messageId":"218","endLine":51,"endColumn":6},{"ruleId":"198","severity":1,"message":"231","line":2,"column":29,"nodeType":"200","messageId":"201","endLine":2,"endColumn":37},{"ruleId":"198","severity":1,"message":"232","line":4,"column":26,"nodeType":"200","messageId":"201","endLine":4,"endColumn":41},{"ruleId":"198","severity":1,"message":"233","line":7,"column":13,"nodeType":"200","messageId":"201","endLine":7,"endColumn":15},{"ruleId":"198","severity":1,"message":"234","line":8,"column":10,"nodeType":"200","messageId":"201","endLine":8,"endColumn":21},{"ruleId":"198","severity":1,"message":"235","line":9,"column":10,"nodeType":"200","messageId":"201","endLine":9,"endColumn":22},{"ruleId":"198","severity":1,"message":"230","line":17,"column":9,"nodeType":"200","messageId":"201","endLine":17,"endColumn":17},{"ruleId":"202","severity":1,"message":"203","line":32,"column":23,"nodeType":"204","messageId":"205","endLine":32,"endColumn":26,"suggestions":"236"},{"ruleId":"202","severity":1,"message":"203","line":18,"column":38,"nodeType":"204","messageId":"205","endLine":18,"endColumn":41,"suggestions":"237"},{"ruleId":"215","severity":1,"message":"216","line":28,"column":31,"nodeType":"217","messageId":"218","endLine":28,"endColumn":59},{"ruleId":"202","severity":1,"message":"203","line":51,"column":29,"nodeType":"204","messageId":"205","endLine":51,"endColumn":32,"suggestions":"238"},{"ruleId":"202","severity":1,"message":"203","line":51,"column":38,"nodeType":"204","messageId":"205","endLine":51,"endColumn":41,"suggestions":"239"},{"ruleId":"202","severity":1,"message":"203","line":56,"column":21,"nodeType":"204","messageId":"205","endLine":56,"endColumn":24,"suggestions":"240"},{"ruleId":"202","severity":1,"message":"203","line":64,"column":17,"nodeType":"204","messageId":"205","endLine":64,"endColumn":20,"suggestions":"241"},{"ruleId":"202","severity":1,"message":"203","line":71,"column":17,"nodeType":"204","messageId":"205","endLine":71,"endColumn":20,"suggestions":"242"},{"ruleId":"198","severity":1,"message":"243","line":6,"column":8,"nodeType":"200","messageId":"201","endLine":6,"endColumn":10},{"ruleId":"198","severity":1,"message":"244","line":30,"column":11,"nodeType":"200","messageId":"201","endLine":30,"endColumn":15},{"ruleId":"198","severity":1,"message":"234","line":2,"column":10,"nodeType":"200","messageId":"201","endLine":2,"endColumn":21},{"ruleId":"198","severity":1,"message":"245","line":30,"column":9,"nodeType":"200","messageId":"201","endLine":30,"endColumn":14},{"ruleId":"202","severity":1,"message":"203","line":30,"column":21,"nodeType":"204","messageId":"205","endLine":30,"endColumn":24,"suggestions":"246"},{"ruleId":"202","severity":1,"message":"203","line":38,"column":21,"nodeType":"204","messageId":"205","endLine":38,"endColumn":24,"suggestions":"247"},{"ruleId":"202","severity":1,"message":"203","line":43,"column":17,"nodeType":"204","messageId":"205","endLine":43,"endColumn":20,"suggestions":"248"},{"ruleId":"202","severity":1,"message":"203","line":44,"column":17,"nodeType":"204","messageId":"205","endLine":44,"endColumn":20,"suggestions":"249"},{"ruleId":"202","severity":1,"message":"203","line":54,"column":13,"nodeType":"204","messageId":"205","endLine":54,"endColumn":16,"suggestions":"250"},{"ruleId":"202","severity":1,"message":"203","line":58,"column":18,"nodeType":"204","messageId":"205","endLine":58,"endColumn":21,"suggestions":"251"},{"ruleId":"202","severity":1,"message":"203","line":67,"column":12,"nodeType":"204","messageId":"205","endLine":67,"endColumn":15,"suggestions":"252"},{"ruleId":"202","severity":1,"message":"203","line":71,"column":23,"nodeType":"204","messageId":"205","endLine":71,"endColumn":26,"suggestions":"253"},{"ruleId":"202","severity":1,"message":"203","line":71,"column":34,"nodeType":"204","messageId":"205","endLine":71,"endColumn":37,"suggestions":"254"},{"ruleId":"202","severity":1,"message":"203","line":95,"column":27,"nodeType":"204","messageId":"205","endLine":95,"endColumn":30,"suggestions":"255"},{"ruleId":"202","severity":1,"message":"203","line":102,"column":50,"nodeType":"204","messageId":"205","endLine":102,"endColumn":53,"suggestions":"256"},{"ruleId":"202","severity":1,"message":"203","line":106,"column":31,"nodeType":"204","messageId":"205","endLine":106,"endColumn":34,"suggestions":"257"},{"ruleId":"202","severity":1,"message":"203","line":107,"column":23,"nodeType":"204","messageId":"205","endLine":107,"endColumn":26,"suggestions":"258"},{"ruleId":"202","severity":1,"message":"203","line":152,"column":22,"nodeType":"204","messageId":"205","endLine":152,"endColumn":25,"suggestions":"259"},{"ruleId":"202","severity":1,"message":"203","line":155,"column":27,"nodeType":"204","messageId":"205","endLine":155,"endColumn":30,"suggestions":"260"},"@typescript-eslint/no-unused-vars","'persistedReducer' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["261","262"],"'persistor' is assigned a value but never used.",["263","264"],"'SocketState' is defined but never used.","'setLineObj' is assigned a value but never used.",["265","266"],"'index' is defined but never used.",["267","268"],["269","270"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","'AUTH_USER_SUCCESS' is defined but never used.","'getLineData' is defined but never used.","'state' is defined but never used.","'action' is defined but never used.",["271","272"],"'SocketTypeData' is defined but never used.","'user' is defined but never used.","'chartData' is defined but never used.","'LineType' is defined but never used.",["273","274"],["275","276"],"'raw_data' is assigned a value but never used.","'useState' is defined but never used.","'CandleStickType' is defined but never used.","'d3' is defined but never used.","'NumberValue' is defined but never used.","'transferData' is defined but never used.",["277","278"],["279","280"],["281","282"],["283","284"],["285","286"],["287","288"],["289","290"],"'TA' is defined but never used.","'open' is assigned a value but never used.","'xAxis' is assigned a value but never used.",["291","292"],["293","294"],["295","296"],["297","298"],["299","300"],["301","302"],["303","304"],["305","306"],["307","308"],["309","310"],["311","312"],["313","314"],["315","316"],["317","318"],["319","320"],{"messageId":"321","fix":"322","desc":"323"},{"messageId":"324","fix":"325","desc":"326"},{"messageId":"321","fix":"327","desc":"323"},{"messageId":"324","fix":"328","desc":"326"},{"messageId":"321","fix":"329","desc":"323"},{"messageId":"324","fix":"330","desc":"326"},{"messageId":"321","fix":"331","desc":"323"},{"messageId":"324","fix":"332","desc":"326"},{"messageId":"321","fix":"333","desc":"323"},{"messageId":"324","fix":"334","desc":"326"},{"messageId":"321","fix":"335","desc":"323"},{"messageId":"324","fix":"336","desc":"326"},{"messageId":"321","fix":"337","desc":"323"},{"messageId":"324","fix":"338","desc":"326"},{"messageId":"321","fix":"339","desc":"323"},{"messageId":"324","fix":"340","desc":"326"},{"messageId":"321","fix":"341","desc":"323"},{"messageId":"324","fix":"342","desc":"326"},{"messageId":"321","fix":"343","desc":"323"},{"messageId":"324","fix":"344","desc":"326"},{"messageId":"321","fix":"345","desc":"323"},{"messageId":"324","fix":"346","desc":"326"},{"messageId":"321","fix":"347","desc":"323"},{"messageId":"324","fix":"348","desc":"326"},{"messageId":"321","fix":"349","desc":"323"},{"messageId":"324","fix":"350","desc":"326"},{"messageId":"321","fix":"351","desc":"323"},{"messageId":"324","fix":"352","desc":"326"},{"messageId":"321","fix":"353","desc":"323"},{"messageId":"324","fix":"354","desc":"326"},{"messageId":"321","fix":"355","desc":"323"},{"messageId":"324","fix":"356","desc":"326"},{"messageId":"321","fix":"357","desc":"323"},{"messageId":"324","fix":"358","desc":"326"},{"messageId":"321","fix":"359","desc":"323"},{"messageId":"324","fix":"360","desc":"326"},{"messageId":"321","fix":"361","desc":"323"},{"messageId":"324","fix":"362","desc":"326"},{"messageId":"321","fix":"363","desc":"323"},{"messageId":"324","fix":"364","desc":"326"},{"messageId":"321","fix":"365","desc":"323"},{"messageId":"324","fix":"366","desc":"326"},{"messageId":"321","fix":"367","desc":"323"},{"messageId":"324","fix":"368","desc":"326"},{"messageId":"321","fix":"369","desc":"323"},{"messageId":"324","fix":"370","desc":"326"},{"messageId":"321","fix":"371","desc":"323"},{"messageId":"324","fix":"372","desc":"326"},{"messageId":"321","fix":"373","desc":"323"},{"messageId":"324","fix":"374","desc":"326"},{"messageId":"321","fix":"375","desc":"323"},{"messageId":"324","fix":"376","desc":"326"},{"messageId":"321","fix":"377","desc":"323"},{"messageId":"324","fix":"378","desc":"326"},{"messageId":"321","fix":"379","desc":"323"},{"messageId":"324","fix":"380","desc":"326"},{"messageId":"321","fix":"381","desc":"323"},{"messageId":"324","fix":"382","desc":"326"},{"messageId":"321","fix":"383","desc":"323"},{"messageId":"324","fix":"384","desc":"326"},"suggestUnknown",{"range":"385","text":"386"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"385","text":"387"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"388","text":"386"},{"range":"388","text":"387"},{"range":"389","text":"386"},{"range":"389","text":"387"},{"range":"390","text":"386"},{"range":"390","text":"387"},{"range":"391","text":"386"},{"range":"391","text":"387"},{"range":"392","text":"386"},{"range":"392","text":"387"},{"range":"393","text":"386"},{"range":"393","text":"387"},{"range":"394","text":"386"},{"range":"394","text":"387"},{"range":"395","text":"386"},{"range":"395","text":"387"},{"range":"396","text":"386"},{"range":"396","text":"387"},{"range":"397","text":"386"},{"range":"397","text":"387"},{"range":"398","text":"386"},{"range":"398","text":"387"},{"range":"399","text":"386"},{"range":"399","text":"387"},{"range":"400","text":"386"},{"range":"400","text":"387"},{"range":"401","text":"386"},{"range":"401","text":"387"},{"range":"402","text":"386"},{"range":"402","text":"387"},{"range":"403","text":"386"},{"range":"403","text":"387"},{"range":"404","text":"386"},{"range":"404","text":"387"},{"range":"405","text":"386"},{"range":"405","text":"387"},{"range":"406","text":"386"},{"range":"406","text":"387"},{"range":"407","text":"386"},{"range":"407","text":"387"},{"range":"408","text":"386"},{"range":"408","text":"387"},{"range":"409","text":"386"},{"range":"409","text":"387"},{"range":"410","text":"386"},{"range":"410","text":"387"},{"range":"411","text":"386"},{"range":"411","text":"387"},{"range":"412","text":"386"},{"range":"412","text":"387"},{"range":"413","text":"386"},{"range":"413","text":"387"},{"range":"414","text":"386"},{"range":"414","text":"387"},{"range":"415","text":"386"},{"range":"415","text":"387"},{"range":"416","text":"386"},{"range":"416","text":"387"},[858,861],"unknown","never",[168,171],[5061,5064],[3258,3261],[3749,3752],[448,451],[379,382],[396,399],[902,905],[417,420],[1165,1168],[1174,1177],[1278,1281],[1516,1519],[1685,1688],[818,821],[1019,1022],[1168,1171],[1223,1226],[1473,1476],[1535,1538],[1801,1804],[1865,1868],[1876,1879],[2521,2524],[2820,2823],[2923,2926],[2988,2991],[4178,4181],[4257,4260]]